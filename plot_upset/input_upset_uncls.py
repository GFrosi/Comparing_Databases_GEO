import pandas as pd
import numpy as np
import sys



def create_group_upset_encode(df, out_f):
    """
    Receives a df containing the columns
    generated by create_col_to_venn, 
    create_binary_cols  and create_group_upset.
    Also receives a output file name. Returns
    a csv file including all new columns.
    """



    #unique
    df['groupsDbsEnc'] = np.where(((df['Merged-valid-sample_ENC'].astype(str) == '11111') & (df['Merged-venn_ENC'] == 'ttttt')) | 
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11110') & (df['Merged-venn_ENC'] == 'ttttf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11101') & (df['Merged-venn_ENC'] == 'tttft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11100') & (df['Merged-venn_ENC'] == 'tttff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11100') & (df['Merged-venn_ENC'] == 'ttftt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11011') & (df['Merged-venn_ENC'] == 'ttftt')) |

                            ((df['Merged-valid-sample_ENC'].astype(str) == '11010') & (df['Merged-venn_ENC'] == 'ttftf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11001') & (df['Merged-venn_ENC'] == 'ttfft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '11000') & (df['Merged-venn_ENC'] == 'ttfff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10111') & (df['Merged-venn_ENC'] == 'tfttt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10110') & (df['Merged-venn_ENC'] == 'tfttf')) |


                            ((df['Merged-valid-sample_ENC'].astype(str) == '10101') & (df['Merged-venn_ENC'] == 'tftft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10100') & (df['Merged-venn_ENC'] == 'tftff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10011') & (df['Merged-venn_ENC'] == 'tfftt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10010') & (df['Merged-venn_ENC'] == 'tfftf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '10001') & (df['Merged-venn_ENC'] == 'tffft')) |

                            ((df['Merged-valid-sample_ENC'].astype(str) == '10000') & (df['Merged-venn_ENC'] == 'tffff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01111') & (df['Merged-venn_ENC'] == 'ftttt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01110') & (df['Merged-venn_ENC'] == 'ftttf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01101') & (df['Merged-venn_ENC'] == 'fttft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01100') & (df['Merged-venn_ENC'] == 'fttff')) |

                            ((df['Merged-valid-sample_ENC'].astype(str) == '01011') & (df['Merged-venn_ENC'] == 'ftftt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01010') & (df['Merged-venn_ENC'] == 'ftftf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01001') & (df['Merged-venn_ENC'] == 'ftfft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '01000') & (df['Merged-venn_ENC'] == 'ftfff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00111') & (df['Merged-venn_ENC'] == 'ffttt')) |

                            ((df['Merged-valid-sample_ENC'].astype(str) == '00110') & (df['Merged-venn_ENC'] == 'ffttf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00101') & (df['Merged-venn_ENC'] == 'fftft')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00100') & (df['Merged-venn_ENC'] == 'fftff')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00011') & (df['Merged-venn_ENC'] == 'ffftt')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00010') & (df['Merged-venn_ENC'] == 'ffftf')) |
                            ((df['Merged-valid-sample_ENC'].astype(str) == '00001') & (df['Merged-venn_ENC'] == 'fffft')), 'Core', 'Other' )

    # df['groups_ENCODEAll'] = np.where(df['ENCODE'] == '1', 'ENCODE','No_ENCODE') #adding encode group
    
    df.to_csv(out_f , sep='\t', index=False)



def create_group_upset(df):
    """
    Receives a df containing the columns
    generated by create_col_to_venn and 
    create_binary_cols. Returns a df including
    a new column 'groups' having two 
    categories: 'Core' or 'Other', and 
    'groups_ENCODE' ('ENCODE', 'No_ENCODE').
    """

    df['groups'] = np.where(((df['Merged-valid-sample'].astype(str) == '1000') & (df['Merged-venn'] == 'tfff')) | 
                            ((df['Merged-valid-sample'].astype(str) == '0100') & (df['Merged-venn'] == 'ftff')) |
                            ((df['Merged-valid-sample'].astype(str) == '0010') & (df['Merged-venn'] == 'fftf')) |
                            ((df['Merged-valid-sample'].astype(str) == '0001') & (df['Merged-venn'] == 'ffft')) |
                            ((df['Merged-valid-sample'].astype(str) == '1100') & (df['Merged-venn'] == 'ttff')) |
                            ((df['Merged-valid-sample'].astype(str) == '1010') & (df['Merged-venn'] == 'tftf')) |
                            ((df['Merged-valid-sample'].astype(str) == '1001') & (df['Merged-venn'] == 'tfft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0110') & (df['Merged-venn'] == 'fttf')) |
                            ((df['Merged-valid-sample'].astype(str) == '0101') & (df['Merged-venn'] == 'ftft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0011') & (df['Merged-venn'] == 'fftt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1101') & (df['Merged-venn'] == 'ttft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0111') & (df['Merged-venn'] == 'fttt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1011') & (df['Merged-venn'] == 'tftt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1110') & (df['Merged-venn'] == 'tttf')) |
                            ((df['Merged-valid-sample'].astype(str) == '1111') & (df['Merged-venn'] == 'tttt')), 'Core', 'Other' )

    df['groups_ENCODE'] = np.where(df['ENCODE'] == '1', 'ENCODE','No_ENCODE') #adding encode group
    
    return df
    # df.to_csv(out_f ,index=False)


def create_binary_cols(df): #adding ENCODE
    """Receives a df containing target_col
    name (e.g Target_GEO_stand). Returns a
    df including boolean columns per DBs if
    a GSM contains a target (except '----'). 
    Number 1 means True, number 0 means False
    (no targets) 
    """


    df['GEO'] = np.where(df.loc[:,'Target-geo-stand'] == '----', '0','1')
    df['CA'] = np.where((df.loc[:,'Antigen-stand'] == '----') | (df.loc[:,'Antigen-stand'] == 'Unclassified') , '0','1') #adding unclassified as 0
    df['CistromeDB'] = np.where(df.loc[:,'Target-cistromedb-stand'] == '----', '0','1')
    df['NGSQC'] = np.where(df.loc[:,'Target-molecule-stand'] == '----', '0','1') #to avoid problems in R - no dash
    df['ENCODE'] = np.where(df.loc[:,'ENCODE_GSM'] == '----', '0','1') #ENCODE column

    #not ENCODE
    df['Merged-valid-sample'] = df['GEO'].astype(str) + \
                                df['CA'].astype(str) + \
                                df['CistromeDB'].astype(str) + \
                                df['NGSQC'].astype(str) 


    #ENCODE
    df['Merged-valid-sample_ENC'] = df['GEO'].astype(str) + \
                                df['CA'].astype(str) + \
                                df['CistromeDB'].astype(str) + \
                                df['NGSQC'].astype(str) +\
                                df['ENCODE']
    
    df['Merged-valid-sample_ENC'] = df['Merged-valid-sample_ENC'].astype(str)
    df['Merged-valid-sample'] = df['Merged-valid-sample'].astype(str)


    return df



def create_col_to_venn(df): #create encode col as well
    """
    Receives a df containing the target cols per
    database (e.g Target_GEO_stand). Returns a df
    containing new cols per DB which receives a 'T'
    or 'F' indicating if the target for the
    DB is a histone of interest or input. 
    """

    list_assays = ["h3k4me3","h3k4me1","h3k27ac","h3k27me3","h3k9me3","h3k36me3","input"]

    df['Geo-venn'] = np.where(df.loc[:,'Target-geo-stand'].isin(list_assays), 't','f')
    df['CA-venn'] = np.where(df.loc[:,'Antigen-stand'].isin(list_assays), 't','f')
    df['Cistrome-venn'] = np.where(df.loc[:,'Target-cistromedb-stand'].isin(list_assays), 't','f')
    df['Ngs-venn'] = np.where(df.loc[:,'Target-molecule-stand'].isin(list_assays), 't','f')
    df['ENCODE-venn'] = np.where((df.loc[:,'Target-geo-stand'].isin(list_assays) & (df.loc[:,'ENCODE_GSM'] != '----')), 't','f')




    df['Merged-venn'] = df['Geo-venn'] + df['CA-venn'] + df['Cistrome-venn'] + df['Ngs-venn'] 
    df['Merged-venn_ENC'] = df['Geo-venn'] + df['CA-venn'] + df['Cistrome-venn'] + df['Ngs-venn'] + df['ENCODE-venn']

    return df
    


def main():

    print('Starting script...')
    df_hist = pd.read_csv(sys.argv[1], sep="\t")
    out_f = sys.argv[2]
    # df_hist_example = df_hist.iloc[:1000]
    print('Creating Venn columns - checking if the target is a histone of interest or input (t or f)')
    df_venn = create_col_to_venn(df_hist)
    print('Creating binary columns per DBs to plot upset venn - staked')
    df_venn_id = create_binary_cols(df_venn)
    # print(df_venn_id.dtypes)
    print('Creating group columns to plot upset venn - Core or Other ')
    df_create_group_upset = create_group_upset(df_venn_id)
    create_group_upset_encode(df_create_group_upset, out_f)
    print('File saved!')


if __name__ == "__main__":



    main()
