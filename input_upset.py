import pandas as pd
import numpy as np
import sys



def create_group_upset(df, out_f):
    """
    Receives a df containing the columns
    generated by create_col_to_venn and 
    create_binary_cols and a output name
    file. Returns a csv file including a
    new column (upset_group) having two 
    categories: 'Hist_Inp' or 'Other'.
    """

    df['groups'] = np.where(((df['Merged-valid-sample'].astype(str) == '1000') & (df['Merged-venn'] == 'tfff')) | 
                            ((df['Merged-valid-sample'].astype(str) == '0100') & (df['Merged-venn'] == 'ftff')) |
                            ((df['Merged-valid-sample'].astype(str) == '0010') & (df['Merged-venn'] == 'fftf')) |
                            ((df['Merged-valid-sample'].astype(str) == '0001') & (df['Merged-venn'] == 'ffft')) |
                            ((df['Merged-valid-sample'].astype(str) == '1100') & (df['Merged-venn'] == 'ttff')) |
                            ((df['Merged-valid-sample'].astype(str) == '1010') & (df['Merged-venn'] == 'tftf')) |
                            ((df['Merged-valid-sample'].astype(str) == '1001') & (df['Merged-venn'] == 'tfft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0110') & (df['Merged-venn'] == 'fttf')) |
                            ((df['Merged-valid-sample'].astype(str) == '0101') & (df['Merged-venn'] == 'ftft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0011') & (df['Merged-venn'] == 'fftt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1101') & (df['Merged-venn'] == 'ttft')) |
                            ((df['Merged-valid-sample'].astype(str) == '0111') & (df['Merged-venn'] == 'fttt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1011') & (df['Merged-venn'] == 'tftt')) |
                            ((df['Merged-valid-sample'].astype(str) == '1110') & (df['Merged-venn'] == 'tttf')) |
                            ((df['Merged-valid-sample'].astype(str) == '1111') & (df['Merged-venn'] == 'tttt')), 'Hist_Inp', 'Other' )

    df['groups_ENCODE'] = np.where(df['ENCODE'] == '1', 'ENCODE','No_ENCODE') #adding encode group
    
    df.to_csv(out_f ,index=False)


def create_binary_cols(df): #adding ENCODE
    """Receives a df containing target_col
    name (e.g Target_GEO_stand). Returns a
    df including boolean columns per DBs if
    a GSM contains a target (except '----'). 
    Number 1 means True, number 0 means False
    (no targets) 
    """


    df['GEO'] = np.where(df.loc[:,'Target-geo-stand'] == '----', '0','1')
    df['NGSQC'] = np.where(df.loc[:,'Target-molecule-stand'] == '----', '0','1') #to avoid problems in R - no dash
    df['CA'] = np.where(df.loc[:,'Antigen-stand'] == '----', '0','1')
    df['CistromeDB'] = np.where(df.loc[:,'Target-cistromedb-stand'] == '----', '0','1')
    df['ENCODE'] = np.where(df.loc[:,'ENCODE_GSM'] == '----', '0','1') #ENCODE column

    df['Merged-valid-sample'] = df['GEO'].astype(str) + df['NGSQC'].astype(str) + df['CA'].astype(str) + df['CistromeDB'].astype(str)
    df['Merged-valid-sample'] = df['Merged-valid-sample'].astype(str)

    return df



def create_col_to_venn(df):
    """
    Receives a df containing the target cols per
    database (e.g Target_GEO_stand). Returns a df
    containing new cols per DB which receives a 'T'
    or 'F' indicating if the target for the
    DB is a histone of interest or input. 
    """

    list_assays = ["h3k4me3","h3k4me1","h3k27ac","h3k27me3","h3k9me3","h3k36me3","input"]

    df['Geo-venn'] = np.where(df.loc[:,'Target-geo-stand'].isin(list_assays), 't','f')
    df['Ngs-venn'] = np.where(df.loc[:,'Target-molecule-stand'].isin(list_assays), 't','f')
    df['CA-venn'] = np.where(df.loc[:,'Antigen-stand'].isin(list_assays), 't','f')
    df['Cistrome-venn'] = np.where(df.loc[:,'Target-cistromedb-stand'].isin(list_assays), 't','f')

    df['Merged-venn'] = df['Geo-venn'] + df['Ngs-venn'] + df['CA-venn'] + df['Cistrome-venn']

    return df
    


def main():

    print('Starting script...')
    df_hist = pd.read_csv(sys.argv[1], sep="\t")
    out_f = sys.argv[2]
    # df_hist_example = df_hist.iloc[:1000]
    print('Creating Venn columns - checking if the target is a histone of interest or input (t or f)')
    df_venn = create_col_to_venn(df_hist)
    print('Creating binary columns per DBs to plot upset venn - staked')
    df_venn_id = create_binary_cols(df_venn)
    # print(df_venn_id.dtypes)
    print('Creating group columns to plot upset venn - Hist_Inp or Other ')
    create_group_upset(df_venn_id,out_f)
    print('File saved!')


if __name__ == "__main__":



    main()